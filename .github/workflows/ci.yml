name: ci

on:
  push:
    branches: [ main, master, '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  lint-format-test-build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trust PowerShell Gallery
        shell: pwsh
        run: |
          Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted

      - name: Install tooling (PSScriptAnalyzer, Pester)
        shell: pwsh
        run: |
          Install-Module PSScriptAnalyzer -Scope CurrentUser -Force -ErrorAction Stop
          Install-Module Pester -Scope CurrentUser -Force -ErrorAction Stop

      - name: Install packager (ps2exe)
        shell: pwsh
        run: |
          Install-Module ps2exe -Scope CurrentUser -Force -ErrorAction Stop

      - name: Lint (PSScriptAnalyzer)
        shell: pwsh
        run: |
          Write-Host "Using PSScriptAnalyzer version:"; (Get-Module PSScriptAnalyzer -ListAvailable | Select-Object -First 1).Version
          Invoke-ScriptAnalyzer -Path . -Recurse -EnableExit -Settings ./PSScriptAnalyzerSettings.psd1

      - name: Format check (no changes allowed)
        shell: pwsh
        run: |
          $changed = @()
          $files = Get-ChildItem -Recurse -Include *.ps1 | Select-Object -ExpandProperty FullName
          foreach ($f in $files) {
            $original = Get-Content -LiteralPath $f -Raw
            $formatted = Invoke-Formatter -ScriptDefinition $original -Settings CodeFormattingOTBS
            if ($formatted -ne $original) { $changed += $f }
          }
          if ($changed.Count -gt 0) {
            Write-Host "The following files need formatting:" -ForegroundColor Red
            $changed | ForEach-Object { Write-Host " - $_" }
            throw "Formatting check failed. Run Invoke-Formatter locally."
          }

      - name: Tests (Pester)
        shell: pwsh
        run: |
          Import-Module Pester -MinimumVersion 5.0.0 -Force
          Write-Host "Using Pester version:" (Get-Module Pester -ListAvailable | Select-Object -First 1).Version
          Invoke-Pester -CI

      - name: Build executable
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          $in  = 'install-lg-ultragear-no-dimming.ps1'
          $out = 'dist\\install-lg-ultragear-no-dimming.exe'
          if (Test-Path $in) {
            Invoke-ps2exe -inputFile $in -outputFile $out -x64 -icon $null -noConsole:$false -title 'LG UltraGear No-Dimming Installer' -description 'Automated installer for LG UltraGear no-dimming ICC profile.'
          }

      - name: Build package (zip)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path dist -Force | Out-Null
          $items = @(
            'install-lg-ultragear-no-dimming.ps1',
            'install-full-auto.bat',
            'lg-ultragear-full-cal.icm',
            'readme.md',
            'license.md',
            'dist\\install-lg-ultragear-no-dimming.exe'
          ) | Where-Object { Test-Path $_ }
          $zip = Join-Path (Resolve-Path dist) 'lg-ultragear-dimming-fix.zip'
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path $items -DestinationPath $zip -CompressionLevel Optimal
          Write-Host "Created package: $zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lg-ultragear-dimming-fix
          path: |
            dist/lg-ultragear-dimming-fix.zip
            dist/install-lg-ultragear-no-dimming.exe

      - name: Compute release version
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        id: ver
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const year = new Date().getFullYear().toString();
            const rels = await github.paginate(github.rest.repos.listReleases, { owner: context.repo.owner, repo: context.repo.repo, per_page: 100 });
            const nums = rels
              .map(r => r.tag_name)
              .filter(t => typeof t === 'string' && t.startsWith(year + '.'))
              .map(t => parseInt(t.split('.')[1], 10))
              .filter(n => Number.isFinite(n));
            const next = (nums.length ? Math.max(...nums) + 1 : 1);
            const version = `${year}.${next}`;
            core.setOutput('version', version);
            core.notice(`Next version: ${version}`);

      - name: Create GitHub release
        if: steps.ver.outputs.version != ''
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.ver.outputs.version }}
          name: ${{ steps.ver.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/lg-ultragear-dimming-fix.zip
            dist/install-lg-ultragear-no-dimming.exe
